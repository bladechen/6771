template <typename T>
class ScopeGuard
{
    public:
        ScopeGuard(const T& t): _t{std::make_unique<T>(t)}{}

        T& revert()
        {
            return *(_t.release());
        }

    private:
        std::unique_ptr<T> _t;
};

template<typename N, typename E>
Graph<N, E>::Node::Node(const N& id):_id{id}{}

template<typename N, typename E>
bool Graph<N, E>::Node::is_out_edge(const N& dst, const E& weight) // will alloc mem, should be not called by noexcept function
{
    return _out.find(std::make_unique<Edge>(std::make_shared<Node>(_id),
                                            std::make_shared<Node>(dst),
                                            weight)) != _out.end();
}

template<typename N, typename E>
void Graph<N, E>::Node::delete_edge(const N& dst, const E& weight) noexcept
{
    for (auto i = _out.begin(); i != _out.end(); ++ i)
    {
        auto src_node = (*i)->_src.lock();
        auto dst_node = (*i)->_dst.lock();

        assert(_is_same_id(src_node->_id , _id));
        if (_is_same_id(dst_node->_id, dst) && _is_same_weight(weight, (*i)->_weight) )
        {
            _out.erase(i);
            return;
        }
    }
}

template<typename N, typename E>
Graph<N, E>::Edge::Edge(const std::shared_ptr<Node>& src, const std::shared_ptr<Node>& dst, const E& weight)
    :_src(src), _dst(dst), _weight(weight){}

template<typename N, typename E>
bool Graph<N, E>::_is_same_id(const N& l, const N& r)
{
    return ((!(l < r)) && (!(r < l)));
}

template<typename N, typename E>
bool Graph<N, E>::_is_same_weight(const E& l, const E& r)
{
    return ((!(l < r)) && (!(r < l)));
}

template<typename N, typename E>
void Graph<N, E>::_deep_copy(const Graph<N, E>& g)
{
    auto tmp = std::move(_nodes_map);
    _nodes_map.clear();
    try
    {
        for (auto i = g._nodes_map.begin(); i != g._nodes_map.end(); ++ i)
        {
            _nodes_map.insert(std::make_pair(i->first, std::make_shared<Graph<N, E>::Node>(i->first)));
        }
        for (auto i = g._nodes_map.begin(); i != g._nodes_map.end(); ++ i)
        {
            for (auto j = (i->second)->_out.begin(); j != (i->second)->_out.end(); ++ j)
            {
                assert((*j)->_dst.lock());
                assert(_nodes_map.find((*j)->_dst.lock()->_id) != _nodes_map.end());
                _insert_edge(_nodes_map[i->first], _nodes_map[(*j)->_dst.lock()->_id], (*j)->_weight);
            }
        }
    }
    catch(...)
    {
        _nodes_map = std::move(tmp);
        throw;
    }
}

template<typename N, typename E>
Graph<N, E>::Graph(){}

template<typename N, typename E>
Graph<N, E>::Graph(const Graph<N, E>& g)
{
    _deep_copy(g);
}

template<typename N, typename E>
Graph<N, E>::Graph(Graph<N, E>&& g)
{
    _nodes_map = std::move(g._nodes_map);
    g._nodes_map.clear();
}

template<typename N, typename E>
Graph<N, E>& Graph<N, E>::operator=(const Graph<N, E>& g)
{
    if (this == &g)
    {
        return *this;
    }
    _deep_copy(g);
    return *this;
}

template<typename N, typename E>
Graph<N, E> & Graph<N, E>::operator=(Graph<N, E>&& g)
{
    if (this == &g)
    {
        return *this;
    }
    _nodes_map.clear();
    _nodes_map = std::move(g._nodes_map);
    g._nodes_map.clear();
    return *this;
}

template<typename N, typename E>
bool Graph<N, E>::addNode(const N& val)
{
    if (_nodes_map.find(val) != _nodes_map.end())
    {
        return false;
    }
    assert(_nodes_map.insert(std::make_pair(val, std::make_shared<Graph<N, E>::Node>(val))).second);
    return true;
}

template<typename N, typename E>
void Graph<N, E>::_insert_edge(std::shared_ptr<Node> src_node,
                               std::shared_ptr<Node> dst_node,
                               const E& weight)
{
    src_node->_out.insert(std::make_unique<Edge>(src_node, dst_node, weight));
}

template<typename N, typename E>
bool Graph<N, E>::addEdge(const N& src, const N& dst, const E& w)
{
    if (_nodes_map.find(src) == _nodes_map.end() || _nodes_map.find(dst) == _nodes_map.end())
    {
        throw std::runtime_error("either src or dst is not in the graph");
    }
    assert(_nodes_map.find(src) != _nodes_map.end());
    assert(_nodes_map.find(dst) != _nodes_map.end());
    auto& src_node = _nodes_map[src];
    auto& dst_node = _nodes_map[dst];
    assert(_is_same_id(src_node->_id , src));
    assert(_is_same_id(dst_node->_id , dst));

    if (src_node->is_out_edge(dst, w))
    {
        return false;
    }
    _insert_edge(src_node, dst_node, w);
    return true;
}

template<typename N, typename E>
bool Graph<N, E>::replace(const N& oldData, const N& newData)
{
    if (_nodes_map.find(oldData) == _nodes_map.end())
    {
        throw std::runtime_error("not find old Data in replace");
    }
    if (_nodes_map.find(newData) != _nodes_map.end())
    {
        return false;
    }
    if (_is_same_id(oldData, newData))
    {
        return true;
    }
    ScopeGuard<Graph> guard(*this);
    try
    {
        _nodes_map[newData] = _nodes_map[oldData];
        _nodes_map[newData]->_id = newData;
        _nodes_map.erase(oldData);
    }
    catch (...)
    {
        std::swap(*this, guard.revert());
        throw;
    }

    return true;
}

template<typename N, typename E>
void Graph<N, E>::mergeReplace(const N& oldData, const N& newData)
{
    if (_nodes_map.find(oldData) == _nodes_map.end() || _nodes_map.find(newData) == _nodes_map.end())
    {
        throw std::runtime_error("not find Data in mergeReplace");
    }

    if (_is_same_id(oldData, newData))
    {
        return;
    }
    ScopeGuard<Graph> guard(*this);
    try
    {
        auto& src = _nodes_map[oldData];
        auto& dst = _nodes_map[newData];
        for (auto i = _nodes_map.begin(); i != _nodes_map.end(); ++ i)
        {
            // from node not the deleted node
            if (!_is_same_id(i->second->_id ,oldData))
            {
                std::vector<E> tmp;
                for (auto j = (i->second)->_out.begin(); j != (i->second)->_out.end();)
                {
                    auto dst_node = (*j)->_dst.lock(); //out node
                    assert(dst_node);
                    if (_is_same_id(dst_node->_id,  oldData))
                    {
                        tmp.push_back((*j)->_weight);
                        j = (i->second)->_out.erase(j);
                        // remove edge to the deleted node
                    }
                    else
                    {
                        ++ j;
                    }
                }
                for (auto j = tmp.begin(); j != tmp.end(); ++ j)
                {
                    if (!((i->second)->is_out_edge(newData, *j)))
                    {
                        _insert_edge(i->second, dst, *j);
                    }
                }
            }
        }

        for (auto i = src->_out.cbegin(); i != src->_out.cend(); ++ i)
        {
            auto node = (*i)->_dst.lock();
            assert(node);
            assert(_is_same_id((*i)->_src.lock()->_id , oldData));
            if (!_is_same_id(node->_id , oldData))
            {
                if (dst->is_out_edge(node->_id, (*i)->_weight))
                {
                    continue;
                }
                _insert_edge(dst, node,  (*i)->_weight);
            }
            else
            {
                if (!(dst->is_out_edge(dst->_id,  (*i)->_weight)))
                    _insert_edge(dst, dst,  (*i)->_weight);

            }
        }
        _nodes_map.erase(oldData);
    }
    catch(...)
    {
        _nodes_map.clear();
        std::swap(*this, guard.revert());
        throw;
    }
}

template<typename N, typename E>
void Graph<N, E>::deleteNode(const N& src) noexcept
{
    if (_nodes_map.find(src) == _nodes_map.end() )
    {
        return;
    }
    for (auto i = _nodes_map.begin(); i != _nodes_map.end(); ++ i)
    {
        if (!_is_same_id(i->second->_id , src))
        {
            std::vector<E> tmp;
            for (auto j = (i->second)->_out.begin(); j != (i->second)->_out.end();)
            {
                auto dst_node = (*j)->_dst.lock(); //out node
                if (_is_same_id(dst_node->_id, src))
                {
                    j = (i->second)->_out.erase(j);
                }
                else
                {
                    ++ j;
                }
            }
        }
    }
    _nodes_map.erase(src);
}

template<typename N, typename E>
void Graph<N, E>::deleteEdge(const N& src, const N& dst, const E& w) noexcept
{
    if (_nodes_map.find(src) == _nodes_map.end() || _nodes_map.find(dst) == _nodes_map.end())
    {
        return;
    }
    auto& src_node = _nodes_map[src];
    auto& dst_node = _nodes_map[dst];
    assert(_is_same_id(src_node->_id, src));
    assert(_is_same_id(dst_node->_id, dst));
    src_node->delete_edge(dst, w);
}

template<typename N, typename E>
void Graph<N, E>::clear() noexcept
{
    _nodes_map.clear();
}

template<typename N, typename E>
bool Graph<N, E>::isNode(const N& val) const
{
    return (_nodes_map.find(val) != _nodes_map.end());
}

template<typename N, typename E>
bool Graph<N, E>::isConnected(const N& src, const N& dst) const
{
    if (_nodes_map.find(src) == _nodes_map.end() || _nodes_map.find(dst) == _nodes_map.end())
    {
        throw std::runtime_error("either src or dst is not in the graph while calling isConnected");
    }
    auto& src_node = _nodes_map.find(src)->second;
    auto& dst_node = _nodes_map.find(dst)->second;
    assert(_is_same_id(src_node->_id , src));
    assert(_is_same_id(dst_node->_id , dst));

    return std::find_if(src_node->_out.cbegin(), src_node->_out.cend(), [&](const std::unique_ptr<Edge>& a) -> bool
                        {
                            return (_is_same_id(a->_src.lock()->_id , src) && _is_same_id(a->_dst.lock()->_id, dst));

                        }) !=  src_node->_out.cend();
}

template<typename N, typename E>
void Graph<N, E>::printNodes(std::ostream& os) const
{
    std::vector<std::shared_ptr<Node> > tmp;
    for (auto i = _nodes_map.begin(); i != _nodes_map.end(); ++ i)
    {
        tmp.push_back(i->second);
    }
    std::sort(tmp.begin(), tmp.end(),
              [](const std::shared_ptr<Node>& a, const std::shared_ptr<Node>& b) ->bool
              {
                  if (a->_out.size() != b->_out.size())
                  {
                      return a->_out.size() < b->_out.size();
                  }
                  else
                  {
                      return a->_id < b ->_id;
                  }
              }
             );
    for (auto i = tmp.cbegin(); i != tmp.cend(); ++ i)
    {
        os << (*i)->_id << std::endl;
    }
}

template<typename N, typename E>
void Graph<N, E>::printEdges(const N& val, std::ostream& os) const
{
    if (_nodes_map.find(val) == _nodes_map.end())
    {
        throw std::runtime_error("no thing to printEdges");
    }
    os << "Edges attached to Node " << val << std::endl;// XXX overload ostream<<?
    auto& node = _nodes_map.find(val)->second;
    if (node->_out.size() == 0)
    {
        os << "(null)" << std::endl;
        return;
    }

    std::vector<std::pair<N, E> > tmp;
    for (auto i = node->_out.cbegin(); i != node->_out.cend(); ++ i)
    {
        tmp.push_back(std::make_pair((*i)->_dst.lock()->_id,(*i)->_weight));
    }

    std::sort(tmp.begin(), tmp.end(),
              [](const std::pair<N, E>& a, const std::pair<N, E>& b) ->bool
              {
                  if (!_is_same_weight(a.second, b.second))
                  {
                      return a.second < b.second;
                  }
                  return a.first < b .first;
              }
             );
    for (auto i = tmp.cbegin(); i != tmp.cend(); ++ i)
    {
        os << i->first << " " << i->second << std::endl;
    }

}

template<typename N, typename E>
void Graph<N, E>::begin() const
{
    _it = _nodes_map.cbegin();

}

template<typename N, typename E>
bool Graph<N, E>::end() const
{
    return _it == _nodes_map.cend();

}

template<typename N, typename E>
void Graph<N, E>::next() const
{
    ++ _it;

}

template<typename N, typename E>
const N& Graph<N, E>::value() const
{
    return (_it->first);
}
